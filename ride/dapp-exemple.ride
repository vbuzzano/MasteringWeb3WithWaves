{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func purchase(itemKey: String) = {
    let pmt = extract(i.payment)  

    # check if itemKey is not empty
    if (!isDefined(itemKey) || itemKey.size() == 0) then
      throw("itemKey is mandatory to purchase a coupon.")
    else {
        if (isDefined(pmt.assetId)) then
        # waves-only threshold
        throw("Can purchase only with Waves at the moment")
        else {
            let customerAddress = i.caller.bytes.toBase58String()
            let price = match this.getInteger("item_A_" + itemKey + "_price") {  # reading coupon price
            case a:Int => a
                case _ => throw("Coupon ' " + itemKey + " ' does not exists, please choose an existing coupon to purchase.")
            }
            if (pmt.amount < price) then throw("Purchase amount cannot be less than item price")
            else {
                WriteSet([
                    DataEntry("status:purchase_A_" + itemKey + "_A_customer_" + customerAddress, "confirmed"),
                    DataEntry("price:purchase_A_" + itemKey + "_A_customer_" + customerAddress, price)
                ])
            }
        }
    }
}

@Verifier(tx)
func verify() = {
    match (tx) {
        case t:SetScriptTransaction => sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        case _ => false
    }
}
